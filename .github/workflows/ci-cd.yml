name: CI/CD Pipeline to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-2
  ECR_BACKEND_REPOSITORY: chatbot-backend
  ECR_FRONTEND_REPOSITORY: chatbot-frontend
  ECS_CLUSTER_NAME: chatbot-ec2-cluster
  ECS_SERVICE_NAME: chatbot-service
  ECS_TASK_DEFINITION: app-task-definition
  CONTAINER_BACKEND_NAME: backend-container
  CONTAINER_FRONTEND_NAME: frontend-container
  # ------------------------------------------------------------------

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests (if available)
        run: |
          cd backend
          echo "Tests placeholder - add your tests here"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      backend_image_uri: ${{ steps.set-output-uris.outputs.backend_uri }}
      frontend_image_uri: ${{ steps.set-output-uris.outputs.frontend_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Define image URIs
        id: define-uris
        run: |
          echo "BACKEND_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "FRONTEND_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.BACKEND_URI }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_URI }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
      - name: Set job outputs
        id: set-output-uris
        run: |
          echo "backend_uri=${{ env.BACKEND_URI }}" >> $GITHUB_OUTPUT
          echo "frontend_uri=${{ env.FRONTEND_URI }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    # --- 1. 코드를 다운로드하는 checkout 단계 추가 ---
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to Amazon ECS
      run: |
        # 현재 작업 정의 다운로드
        TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition)

        # 새 이미지 주소로 교체
        NEW_TASK_DEF_JSON=$(echo $TASK_DEF_JSON | \
          jq --arg IMAGE_BACKEND "${{ needs.build-and-push.outputs.backend_image_uri }}" \
             --arg CONTAINER_BACKEND "$CONTAINER_BACKEND_NAME" \
             '( .containerDefinitions[] | select(.name == $CONTAINER_BACKEND) ).image = $IMAGE_BACKEND' | \
          jq --arg IMAGE_FRONTEND "${{ needs.build-and-push.outputs.frontend_image_uri }}" \
             --arg CONTAINER_FRONTEND "$CONTAINER_FRONTEND_NAME" \
             '( .containerDefinitions[] | select(.name == $CONTAINER_FRONTEND) ).image = $IMAGE_FRONTEND')
        
        # 등록에 필요한 키만 추출하여 'role/null' 및 'cpu/memory' 오류 방지
        NEW_TASK_DEF_INPUT=$(echo $NEW_TASK_DEF_JSON | jq '{
            family: .family,
            taskRoleArn: .taskRoleArn,
            executionRoleArn: .executionRoleArn,
            networkMode: .networkMode,
            containerDefinitions: .containerDefinitions,
            volumes: .volumes,
            requiresCompatibilities: .requiresCompatibilities
        }')

        # 새 작업 정의 등록
        NEW_TASK_DEF_REGISTER=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF_INPUT")
        NEW_REVISION_ARN=$(echo $NEW_TASK_DEF_REGISTER | jq -r '.taskDefinition.taskDefinitionArn')
        
        # 서비스 업데이트
        aws ecs update-service \
          --cluster $ECS_CLUSTER_NAME \
          --service $ECS_SERVICE_NAME \
          --task-definition $NEW_REVISION_ARN